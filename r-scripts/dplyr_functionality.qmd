---
title: "Summary of dplyr functionality"
author: "Daan Kroeze - ChatGPT"
date: "2024-09-11"
format: html
editor: 
  markdown: 
    wrap: 72
editor_options: 
  chunk_output_type: console
---

The `dplyr` package in R is one of the most widely used packages for data manipulation and transformation. It provides a set of easy-to-use functions designed to work efficiently with data frames (or tibbles). The primary goal of `dplyr` is to simplify common data manipulation tasks using a consistent syntax.

Here's a summary of key `dplyr` functions and their functionality:

---

### 1. **Basic Data Manipulation Functions:**

#### **1.1 `select()`**
- **Purpose**: Select specific columns from a data frame.
- **Example**: 
  ```r
  df %>% select(column1, column2)
  ```

#### **1.2 `filter()`**
- **Purpose**: Filter rows based on specific conditions.
- **Example**: 
  ```r
  df %>% filter(column1 > 10, column2 == "value")
  ```

#### **1.3 `mutate()`**
- **Purpose**: Add new columns or modify existing ones.
- **Example**:
  ```r
  df %>% mutate(new_column = column1 * 2)
  ```

#### **1.4 `arrange()`**
- **Purpose**: Sort rows by one or more columns.
- **Example**:
  ```r
  df %>% arrange(column1)  # Ascending
  df %>% arrange(desc(column1))  # Descending
  ```

#### **1.5 `summarize()` (or `summarise()`)**
- **Purpose**: Summarize data by applying aggregation functions such as `sum()`, `mean()`, `min()`, `max()`, etc.
- **Example**:
  ```r
  df %>% summarize(total = sum(column1))
  ```

#### **1.6 `group_by()`**
- **Purpose**: Group data by one or more columns to perform grouped operations (e.g., summarize by group).
- **Example**:
  ```r
  df %>% group_by(group_column) %>% summarize(total = sum(column1))
  ```

#### **1.7 `rename()`**
- **Purpose**: Rename columns in a data frame.
- **Example**:
  ```r
  df %>% rename(new_name = old_name)
  ```

#### **1.8 `distinct()`**
- **Purpose**: Select distinct (unique) rows from a data frame.
- **Example**:
  ```r
  df %>% distinct(column1)
  ```

---

### 2. **Advanced Functions:**

#### **2.1 `slice()`**
- **Purpose**: Select rows by position (e.g., the first row, last row, or a range of rows).
- **Example**:
  ```r
  df %>% slice(1:5)  # First 5 rows
  ```

#### **2.2 `slice_max()`**
- **Purpose**: Select rows with the maximum value in a column.
- **Example**:
  ```r
  df %>% slice_max(column1, n = 3)  # Top 3 rows with the highest values
  ```

#### **2.3 `slice_min()`**
- **Purpose**: Select rows with the minimum value in a column.
- **Example**:
  ```r
  df %>% slice_min(column1, n = 2)  # Top 2 rows with the lowest values
  ```

#### **2.4 `sample_n()`**
- **Purpose**: Randomly select a specific number of rows.
- **Example**:
  ```r
  df %>% sample_n(5)  # Randomly select 5 rows
  ```

#### **2.5 `sample_frac()`**
- **Purpose**: Randomly sample a fraction of the rows.
- **Example**:
  ```r
  df %>% sample_frac(0.1)  # Randomly select 10% of the rows
  ```

#### **2.6 `pull()`**
- **Purpose**: Extract a single column as a vector.
- **Example**:
  ```r
  df %>% pull(column_name)
  ```

---

### 3. **Join Functions (for Combining Data):**

`dplyr` provides several join functions similar to SQL for combining data from multiple data frames:

#### **3.1 `left_join()`**
- **Purpose**: Returns all rows from the left table and matching rows from the right table.
- **Example**:
  ```r
  df1 %>% left_join(df2, by = "key_column")
  ```

#### **3.2 `right_join()`**
- **Purpose**: Returns all rows from the right table and matching rows from the left table.
- **Example**:
  ```r
  df1 %>% right_join(df2, by = "key_column")
  ```

#### **3.3 `inner_join()`**
- **Purpose**: Returns only the matching rows between both tables.
- **Example**:
  ```r
  df1 %>% inner_join(df2, by = "key_column")
  ```

#### **3.4 `full_join()`**
- **Purpose**: Returns all rows when there is a match in either left or right table.
- **Example**:
  ```r
  df1 %>% full_join(df2, by = "key_column")
  ```

#### **3.5 `anti_join()`**
- **Purpose**: Returns rows from the left table that do not have a match in the right table.
- **Example**:
  ```r
  df1 %>% anti_join(df2, by = "key_column")
  ```

---

### 4. **Piping (`%>%`)**
The `%>%` operator, also known as the pipe operator, is used to chain together multiple `dplyr` functions in a readable and efficient way. Instead of nesting functions inside one another, you pass the result of one function to the next function in a sequence.

#### **Example:**
```r
df %>%
  filter(column1 > 10) %>%
  select(column1, column2) %>%
  arrange(desc(column1))
```

---

### 5. **Common Aggregation Functions Used in `dplyr`:**
- `sum()`: Sum of values.
- `mean()`: Mean (average) of values.
- `median()`: Median of values.
- `min()`, `max()`: Minimum or maximum value.
- `n()`: Number of observations in a group.
- `n_distinct()`: Count of unique values.
- `sd()`: Standard deviation of values.

---

### Summary:

The `dplyr` package is highly flexible and efficient for data manipulation tasks such as:
- Selecting and filtering rows.
- Creating and modifying columns.
- Summarizing and aggregating data.
- Sorting and rearranging rows.
- Joining multiple data frames.

Its combination with the pipe operator (`%>%`) enables you to write clean, readable code for complex data workflows. Let me know if you'd like more details on any specific functions or operations!